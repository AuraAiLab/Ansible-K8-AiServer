---
- hosts: all
  become: yes
  vars:
    kube_version: "1.32.2-1.1"
    cni_plugin: "flannel"

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Check if essential system packages are installed
      shell: dpkg -l | grep -q "{{ item }}"
      register: package_installed
      ignore_errors: true
      loop:
        - curl
        - git
        - build-essential
        - nfs-common
        - ca-certificates
        - apt-transport-https
        - gnupg
        - software-properties-common
        - containerd
        - htop
        - unzip
        - net-tools

    - name: Install essential system packages
      apt:
        name: "{{ item }}"
        state: present
      when: "'install ok installed' not in package_installed.results | selectattr('item', 'equalto', item) | map(attribute='stdout') | list"
      loop:
        - curl
        - git
        - build-essential
        - nfs-common
        - ca-certificates
        - apt-transport-https
        - gnupg
        - software-properties-common
        - containerd
        - htop
        - unzip
        - net-tools

    - name: Ensure NTP is installed and running
      apt:
        name: ntp
        state: present
      notify: Restart NTP

    - name: Disable swap permanently
      shell: sed -i '/ swap / s/^/#/' /etc/fstab && swapoff -a
      ignore_errors: yes

    - name: Enable IP forwarding for Kubernetes networking
      lineinfile:
        path: /etc/sysctl.conf
        line: 'net.ipv4.ip_forward = 1'
        create: yes

    - name: Apply sysctl settings
      command: sysctl -p

    - name: Create necessary model directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /models/triton/model_repo
        - /models/ollama

  handlers:
    - name: Restart NTP
      service:
        name: ntp
        state: restarted

- hosts: all
  become: yes
  tasks:
    - name: Add NVIDIA PPA
      apt_repository:
        repo: "ppa:graphics-drivers/ppa"
        state: present

    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install NVIDIA driver (version 535)
      apt:
        name: "nvidia-driver-535"
        state: present

    - name: Set flag to indicate reboot is required
      file:
        path: /tmp/ansible_reboot_required
        state: touch

    - name: Reboot if needed after installing NVIDIA drivers
      command: shutdown -r now "Rebooting to apply NVIDIA drivers"
      async: 1
      poll: 0
      ignore_errors: true
      when: ansible_connection == "local"

    - name: Wait for system to come back online
      wait_for_connection:
        delay: 30
        timeout: 600
      when: ansible_connection == "local"

    - name: Add Kubernetes signing key
      ansible.builtin.apt_key:
        keyserver: keyserver.ubuntu.com
        id: 234654DA9A296436
        state: present

    - name: Update APT cache
      apt:
        update_cache: yes

     - name: Add Kubernetes Repository Key
      shell: |
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | tee /etc/apt/keyrings/kubernetes-apt-keyring.asc

    - name: Add Kubernetes APT repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /

    - name: Install Kubernetes Components
      apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: present

    - name: Enable and Start containerd
      systemd:
        name: containerd
        enabled: yes
        state: started

    - name: Enable and Start kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Check if container runtime is running
      shell: "systemctl is-active --quiet containerd"
      register: containerd_status
      failed_when: containerd_status.rc != 0

    - name: Initialize Kubernetes (If Not Initialized)
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Configure kubectl for Current User
      block:
        - name: Ensure .kube directory exists
          file:
            path: "{{ ansible_env.HOME }}/.kube"
            state: directory
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
            mode: '0755'

        - name: Copy Kubernetes Admin Config
          copy:
            src: /etc/kubernetes/admin.conf
            dest: "{{ ansible_env.HOME }}/.kube/config"
            remote_src: yes
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
            mode: '0644'

    - name: Check if CNI Plugin is Installed
      stat:
        path: /etc/cni/net.d
      register: cni_status

    - name: Install CNI Plugin (Flannel) If Missing
      command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      when: not cni_status.stat.exists

    - name: Wait for Flannel to Initialize
      pause:
        seconds: 30

    - name: Verify Kubernetes API Server is Running
      shell: "ss -tulnp | grep 6443"
      register: kube_api_status
      failed_when: kube_api_status.rc != 0

    - name: Verify Kubernetes Cluster is Ready
      command: kubectl get nodes

    - name: Verify All System Pods are Running
      command: kubectl get pods -A

    - name: Pause for manual verification before proceeding
      pause:
        prompt: "Check if Kubernetes is running properly (kubectl cluster-info). Press Enter to continue to networking setup."
        minutes: 5
      when: "'master' in inventory_hostname"

- hosts: all
  become: yes
  tasks:
    - name: Install NVIDIA GPU Operator for Kubernetes GPU Sharing
      shell: |
        helm repo add nvidia https://helm.ngc.nvidia.com/nvidia
        helm repo update
        helm install gpu-operator nvidia/gpu-operator --namespace gpu-operator --create-namespace
      when: "'master' in inventory_hostname"

    - name: Configure Kubernetes GPU resource limits for dynamic allocation
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Pod
        metadata:
          name: gpu-test-pod
        spec:
          restartPolicy: Never
          containers:
          - name: cuda-container
            image: nvidia/cuda:11.8.0-runtime-ubuntu20.04
            resources:
              limits:
                nvidia.com/gpu: 1  # Full GPU access when available
        EOF
      when: "'master' in inventory_hostname"

    - name: Install and configure Kubernetes Web Admin Interface
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
      when: "'master' in inventory_hostname"

    - name: Install monitoring tools (Prometheus & Grafana)
      shell: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
      when: "'master' in inventory_hostname"

    - name: Install Ollama
      shell: |
        helm install ollama ./ollama-chart --namespace ollama --create-namespace
      when: "'master' in inventory_hostname"

    - name: Install Triton Inference Server
      shell: |
        helm install triton ./triton-chart --namespace triton-inference --create-namespace
      when: "'master' in inventory_hostname"

    - name: Install OpenWebUI
      shell: |
        helm install openwebui ./openwebui-chart --namespace openwebui --create-namespace
      when: "'master' in inventory_hostname"

    - name: Deploy Calico Network Plugin
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      when: inventory_hostname == "master"

    - name: Ensure CoreDNS is deployed
      shell: kubectl get pods -n kube-system | grep coredns || kubectl apply -f https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/coredns/coredns.yaml
      when: "'master' in inventory_hostname"

    - name: Retrieve Kubernetes Dashboard Token
      shell: kubectl -n kubernetes-dashboard create token admin-user
      register: k8s_dashboard_token
      when: "'master' in inventory_hostname"

    - name: Retrieve Kubernetes Dashboard Token
      shell: kubectl -n kubernetes-dashboard create token admin-user
      register: k8s_dashboard_token
      when: "'master' in inventory_hostname"

    - name: Install MetalLB for external Load Balancing
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/main/manifests/metallb-native.yaml
        kubectl create -f - <<EOF
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: default-pool
          namespace: metallb-system
        spec:
          addresses:
          - 192.168.20.20-192.168.20.24
        EOF
      when: "'master' in inventory_hostname"

- hosts: k8s_nodes
  become: yes
  tasks:
    - name: Display Deployment Summary
      debug:
        msg:
          - "Kubernetes cluster setup completed successfully."
          - "Use 'kubectl get nodes' to verify node status."
          - "Kubernetes Dashboard: https://{{ ansible_host }}:6443"
          - "Run 'kubectl cluster-info' to check cluster status."
          - "Kubernetes Dashboard: https://{{ ansible_host }}:6443"
          - "Kubernetes Dashboard Token: {{ k8s_dashboard_token.stdout }}"
          - "Prometheus: http://192.168.20.20:9090"
          - "Grafana: http://192.168.20.21:3000 (User: admin, Password: prom-operator)"
          - "Triton Inference Server: http://192.168.20.22:8000"
          - "Ollama: http://192.168.20.23:11434"
          - "OpenWebUI: http://192.168.20.24:3001 (Default User: admin, Password: admin123)"


